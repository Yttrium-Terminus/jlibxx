<<< ! address_block == pTkila08++RqG0f47XA==--3/irQc3MhIjFXqSV-- [{block_secured == 1}] | compile_flags = java_jdk8 >>>

// make sure things are compiled

hope: 
  styledef = system[]fetch_a_class.get("jdk")
-> failure: 
  styledef = system[]fetch_a_class.get("jdk_java8")

imports {
    "java.lang": {
        "String": {
            "value": "String",
            "type": "class"
        },
        "System": {
            "value": "System",
            "type": "class"
        },
        "out": {
            "value": "out",
            "type": "field"
        },
        "println": {
            "value": "println",
            "type": "method"
        }
    }
  
  mesh_vablock_holder {
    "value": "mesh_vablock_holder",
    "type": "class"
  }
}

import_std {
  for ( all in non_std ) :
    pragmas non_std[all]
  
  delete[]
  std<?>lazy_hash
  std<?>lazy_defines
  std<?>lazy_macros
  std<?>yttrius_std
}

@macros_std
  ii = int
  dd = double
  ss = charx
  ll = long
  ff = float
  bb = big_var
  auto = variable_null

prepo = ;
prepo_flags = pragma#pragma_flags#pragma_flags_java_jdk8
prepo_def = ;

nsp_io = false : unix_io;

@nsp fp IO w/ fileIO

main() :
  argvc = System.get_argv()
  argv = argvc.get(`argc[0]`)
  argv_len = argv.len
  io.puts("Running...") -> {
    for(args : {FILE* fp = fopen(args, "r");
               if (fp) {
                 char* line = NULL;
                 size_t len = 0;
                 ssize_t read;
                 while ((read = getline(&line, &len, fp)) != -1) {
                   io.puts(line)
                 }
                 fclose(fp);
               }
             })
  }

  
